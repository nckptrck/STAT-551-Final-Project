---
title: "Project"
author: "Billy Block, Ruben Jimenez, and Nick Patrick"
format: html
editor: visual
---

### Libraries

```{r}
#| label: load-libraries
library(tidyverse)
library(tidymodels)
library(ROSE)
library(themis)
```
### Data Reading

```{r}
#| label: read-data
cdc <- read_csv('diabetes-cdc.csv')

cdc_balanced <- read_csv('diabetes-cdc-balanced.csv')

pancreas <- read_csv("data/pancreas_patients.csv")
```


```{r}
#| label: eda


cdc |> 
  mutate(Diabetes_012 = factor(Diabetes_012,
                          levels = c(0, 1, 2),
                          labels = c('No Diabetes',
                                     'Prediabetes',
                                     'Diabetes'))) |> 
  ggplot(aes(x = Diabetes_012)) +
  geom_bar()


cdc_balanced |> 
  mutate()
```


```{r}
#| label: pancreas reformatting

pancreas <- pancreas |>
  rename(death = event) |>
  mutate(death = as.factor(as.integer(death)) %>% 
           fct_relevel("1"),
         DIAB = factor(DIAB),
         EDUCATION = factor(EDUCATION),
         ETHCAT = factor(ETHCAT),
         WORK_INCOME_TCR = factor(WORK_INCOME_TCR),
         ON_DIALYSIS = factor(ON_DIALYSIS)) |>
  select(-`...1`)
  
full_pancreas_rec <- recipe(death ~ ., data=pancreas) |>
  step_dummy(ABO, DIAB, EDUCATION, ETHCAT, GENDER, WORK_INCOME_TCR, ON_DIALYSIS) |>
  step_normalize(INIT_AGE, INIT_BMI_CALC, HGT_CM_TCR, TOT_SERUM_ALBUM, WGT_KG_TCR, INIT_CPRA, INIT_QUAL_DIFF) |>
  step_rose(death)
```

### Create Pancreas Test Set

```{r}
pancreas$id <- 1:nrow(pancreas)
pancreas_train <- pancreas |>
  sample_frac(.8)

pancreas_test <- pancreas |>
  anti_join(pancreas_train, by="id")

pancreas_train <- pancreas_train |>
  select(-id)

pancreas_test <- pancreas_test |>
  select(-id)
```


### Logistic Regression (No Penalty), Pancreas Data

```{r}
#| label: logistic regression on pancreas

logit_mod <- logistic_reg() %>%
  set_mode("classification") %>%
  set_engine("glm")

pancreas_lr_wflow <- workflow() |>
  add_recipe(full_pancreas_rec) |>
  add_model(logit_mod)

pancreas_lr_fit <- pancreas_lr_wflow |>
  fit(pancreas_train)

custom_metrics <- metric_set(accuracy, roc_auc, precision, recall, f_meas)

pancreas_cvs <- vfold_cv(pancreas_train, v=5)

pancreas_lr_cv <- logit_mod |>
  fit_resamples(full_pancreas_rec, 
                resamples = pancreas_cvs,
                metrics = custom_metrics)

pancreas_lr_cv |> collect_metrics()
```

### Logistic Regression (Penalized), Pancreas Data

```{r}
grid_params <- grid_regular(penalty(),
                            mixture(),
                            levels=2)

lr_tune <- logistic_reg(penalty=tune(), mixture = tune()) %>%
  set_engine("glmnet") %>%
  set_mode("classification")

lr_wflow_tune <- workflow() |>
  add_recipe(balanced_rec) |>
  add_model(lr_tune)

lr_grid_search <- tune_grid(lr_wflow_tune,
                               resamples = balanced_cvs,
                               grid = grid_params)


lr_grid_search |> collect_metrics() |> filter(.metric == "roc_auc") |> slice_max(mean, n=10)
```

### LDA

```{r}
#| label: lda
#| eval: false
lda_mod <- discrim_linear() %>%
  set_engine("MASS") %>%
  set_mode("classification")

lda_cv <- lda_mod |> 
  fit_resamples(balanced_rec,
                resamples = balanced_cvs)

lda_cv |> collect_metrics()
```

### QDA

```{r}
#| label: qda
#| eval: false
qda_mod <- discrim_regularized(frac_common_cov = 0) %>% 
             set_engine("klaR") %>% 
             set_mode("classification")

qda_cv <- qda_mod |> 
  fit_resamples(balanced_rec,
                resamples = balanced_cvs)

qda_cv |> collect_metrics()
```

### Decision Tree

```{r}
#| label: decision-tree
#| eval: false
tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          min_n(), 
                          levels = 3)

balanced_rec <- recipe(Diabetes_binary ~ ., data = cdc_balanced) |> 
  step_dummy(all_factor_predictors()) |> 
  step_normalize(BMI, MentHlth, PhysHlth)

tree_mod_tune <- decision_tree(cost_complexity = tune(),
                          tree_depth = tune(),
                          min_n = tune()) %>%
  set_engine("rpart") %>%
  set_mode("classification")

tree_wflow <- workflow() %>%
  add_model(tree_mod_tune) %>% 
  add_recipe(balanced_rec)

tree_grid_search <-
  tune_grid(
    tree_wflow,
    resamples = balanced_cvs,
    grid = tree_grid
  )

tree_grid_search |> collect_metrics() |> filter(.metric == "roc_auc") |>  slice_max(mean, n = 5)
```

### Bagging

```{r}
#| label: bagging
#| eval: false
bag_tree_tune <- bag_tree(cost_complexity = tune(),
                          tree_depth = tune(),
                          min_n = tune()) %>%
  set_engine("rpart", times = 5) %>%
  set_mode("classification")


bagged_wf <- workflow() |> 
  add_recipe(balanced_rec) |> 
  add_model(bag_tree_tune)

bagged_grid_search <- tune_grid(
    bagged_wf,
    resamples = balanced_cvs,
    grid = tree_grid
  )

bagged_grid_search |> collect_metrics() |> filter(.metric == "roc_auc") |>  slice_max(mean, n = 5)
```

### Random Forest

```{r}
#| label: random-forest
#| eval: false
rf_tune <- rand_forest(mtry = tune(), 
                       min_n = tune(),
                       trees = 200) %>%
  set_engine("ranger") %>%
  set_mode("classification")


rf_grid <- grid_regular(mtry(c(1,21)),
                        min_n(), 
                        levels = 4)

rf_tune_wf <- workflow() |> 
  add_recipe(balanced_rec) |> 
  add_model(rf_tune)

rf_grid_search <- tune_grid(
    rf_tune_wf,
    resamples = balanced_cvs,
    grid = rf_grid
  )
rf_grid_search |> collect_metrics() |> filter(.metric == "roc_auc") |> slice_max(mean, n = 5)
```
